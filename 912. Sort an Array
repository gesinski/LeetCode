class Solution {
public:
    void merge(vector<int>& array, int firstIndex, int middleIndex, int lastIndex) { 
    int size1 = middleIndex - firstIndex + 1;
    int size2 = lastIndex - middleIndex; 
  
    vector<int> leftArray(size1), rightArray(size2); 
  
    for (int i = 0; i < size1; i++) 
        leftArray[i] = array[firstIndex + i]; 
    for (int j = 0; j < size2; j++) 
        rightArray[j] = array[middleIndex + 1 + j]; 

    int i = 0; 
    int j = 0; 
  
    int k = firstIndex; 
    while (i < size1 && j < size2) { 
        if (leftArray[i] < rightArray[j]) { 
            array[k] = leftArray[i]; 
            i++; 
        } 
        else { 
            array[k] = rightArray[j]; 
            j++; 
        } 
        k++; 
    } 
  
    while (i < size1) { 
        array[k] = leftArray[i]; 
        i++; 
        k++; 
    } 
  
    while (j < size2) { 
        array[k] = rightArray[j]; 
        j++; 
        k++; 
    }
} 
  
void mergeSort(vector<int>& array, int firstIndex, int lastIndex) 
{ 
    if (firstIndex < lastIndex) { 
        int middleIndex = firstIndex + (lastIndex - firstIndex) / 2; 
  
        mergeSort(array, firstIndex, middleIndex); 
        mergeSort(array, middleIndex + 1, lastIndex); 
  
        merge(array, firstIndex, middleIndex, lastIndex); 
    } 
}
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size()-1);

        return nums;
    }
};
