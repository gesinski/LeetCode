class Solution {
public:
    struct stack {
        int pos;
        struct stack *next;
    };

    void stackINIT(struct stack *head) {
        head->next = NULL;
    }

    void push(struct stack *StackOfPositions, int pos) {
        struct stack *newStack = (struct stack *)malloc(sizeof(struct stack));
        
        newStack->pos = pos;
        newStack->next = StackOfPositions->next;

        StackOfPositions->next = newStack;
    }

    int pop(struct stack *StackOfPositions) {
        if ( StackOfPositions->next == NULL )
            return 0;
        int s = StackOfPositions->next->pos;
        void *x= StackOfPositions->next;
        StackOfPositions->next = StackOfPositions->next->next;
        free(x);
        return s;
    }

    void reverse(string &s) {
        string tmp = s;
        for (int i = 0; i < tmp.length(); i++) {
            s[i] = tmp[s.length()-1-i];
        }
    }

    string reverseParentheses(string s) {
        struct stack openBrackets;
        stackINIT(&openBrackets);
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '(') {
                push(&openBrackets, i);
            } else if (s[i] == ')') {
                int start = pop(&openBrackets);

                string toReverse = s.substr(start + 1, i - start - 1);
                reverse(toReverse);
                s = s.substr(0, start) + toReverse + s.substr(i + 1);

                i = start + toReverse.length() - 1;
            }
        }
        return s;
    }
};
